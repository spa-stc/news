// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package dbsqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getTokenClaimsByUserID = `-- name: GetTokenClaimsByUserID :one
SELECT id, is_admin, status FROM users WHERE id = $1 LIMIT 1
`

type GetTokenClaimsByUserIDRow struct {
	ID      uuid.UUID
	IsAdmin bool
	Status  UserStatus
}

func (q *Queries) GetTokenClaimsByUserID(ctx context.Context, db DBTX, id uuid.UUID) (GetTokenClaimsByUserIDRow, error) {
	row := db.QueryRow(ctx, getTokenClaimsByUserID, id)
	var i GetTokenClaimsByUserIDRow
	err := row.Scan(&i.ID, &i.IsAdmin, &i.Status)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT 
	users.id, users.name, users.email, users.password_hash, users.is_admin, users.status, users.created_ts, users.updated_ts, 
	COUNT(email_verifications.id) AS verification_attempts 
FROM 
	users LEFT JOIN email_verifications ON user_id = users.id 
WHERE 
	users.email = $1
GROUP BY 
	users.id 
LIMIT 1
`

type GetUserByEmailRow struct {
	ID                   uuid.UUID
	Name                 string
	Email                string
	PasswordHash         string
	IsAdmin              bool
	Status               UserStatus
	CreatedTs            time.Time
	UpdatedTs            time.Time
	VerificationAttempts int64
}

func (q *Queries) GetUserByEmail(ctx context.Context, db DBTX, email string) (GetUserByEmailRow, error) {
	row := db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.IsAdmin,
		&i.Status,
		&i.CreatedTs,
		&i.UpdatedTs,
		&i.VerificationAttempts,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT 
	users.id, users.name, users.email, users.password_hash, users.is_admin, users.status, users.created_ts, users.updated_ts, 
	COUNT(email_verifications.id) AS verification_attempts 
FROM 
	users LEFT JOIN email_verifications ON user_id = users.id 
WHERE 
	users.id = $1
GROUP BY 
	users.id
LIMIT 1
`

type GetUserByIDRow struct {
	ID                   uuid.UUID
	Name                 string
	Email                string
	PasswordHash         string
	IsAdmin              bool
	Status               UserStatus
	CreatedTs            time.Time
	UpdatedTs            time.Time
	VerificationAttempts int64
}

func (q *Queries) GetUserByID(ctx context.Context, db DBTX, id uuid.UUID) (GetUserByIDRow, error) {
	row := db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.IsAdmin,
		&i.Status,
		&i.CreatedTs,
		&i.UpdatedTs,
		&i.VerificationAttempts,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (
	id,
	name,
	email,
	password_hash
) VALUES (
	$1,
	$2,
	$3,
	$4
) RETURNING id, name, email, password_hash, is_admin, status, created_ts, updated_ts
`

type InsertUserParams struct {
	ID           uuid.UUID
	Name         string
	Email        string
	PasswordHash string
}

func (q *Queries) InsertUser(ctx context.Context, db DBTX, arg InsertUserParams) (User, error) {
	row := db.QueryRow(ctx, insertUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.IsAdmin,
		&i.Status,
		&i.CreatedTs,
		&i.UpdatedTs,
	)
	return i, err
}

const updateUserByID = `-- name: UpdateUserByID :exec
UPDATE 
	users 
SET 
	status = CASE WHEN $1::boolean 
		THEN $2::user_status ELSE status END,

	password_hash = CASE WHEN $3::boolean
		THEN $4::VARCHAR ELSE password_hash END, 

	updated_ts = NOW()
WHERE 
	id = $5
`

type UpdateUserByIDParams struct {
	StatusDoUpdate       bool
	Status               UserStatus
	PasswordHashDoUpdate bool
	PasswordHash         string
	ID                   uuid.UUID
}

func (q *Queries) UpdateUserByID(ctx context.Context, db DBTX, arg UpdateUserByIDParams) error {
	_, err := db.Exec(ctx, updateUserByID,
		arg.StatusDoUpdate,
		arg.Status,
		arg.PasswordHashDoUpdate,
		arg.PasswordHash,
		arg.ID,
	)
	return err
}
