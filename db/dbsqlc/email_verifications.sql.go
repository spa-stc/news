// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: email_verifications.sql

package dbsqlc

import (
	"context"

	"github.com/google/uuid"
)

const getEmailVerificationBySecret = `-- name: GetEmailVerificationBySecret :one
SELECT secret, user_id, used FROM email_verifications WHERE secret = $1 LIMIT 1
`

type GetEmailVerificationBySecretRow struct {
	Secret string
	UserID uuid.UUID
	Used   bool
}

func (q *Queries) GetEmailVerificationBySecret(ctx context.Context, db DBTX, secret string) (GetEmailVerificationBySecretRow, error) {
	row := db.QueryRow(ctx, getEmailVerificationBySecret, secret)
	var i GetEmailVerificationBySecretRow
	err := row.Scan(&i.Secret, &i.UserID, &i.Used)
	return i, err
}

const insertEmailVerification = `-- name: InsertEmailVerification :one
INSERT INTO email_verifications (
	id,
	secret,
	user_id
) VALUES (
	$1,
	$2, 
	$3 
) RETURNING secret, user_id, used
`

type InsertEmailVerificationParams struct {
	ID     uuid.UUID
	Secret string
	UserID uuid.UUID
}

type InsertEmailVerificationRow struct {
	Secret string
	UserID uuid.UUID
	Used   bool
}

func (q *Queries) InsertEmailVerification(ctx context.Context, db DBTX, arg InsertEmailVerificationParams) (InsertEmailVerificationRow, error) {
	row := db.QueryRow(ctx, insertEmailVerification, arg.ID, arg.Secret, arg.UserID)
	var i InsertEmailVerificationRow
	err := row.Scan(&i.Secret, &i.UserID, &i.Used)
	return i, err
}
