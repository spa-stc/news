// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: days.sql

package dbsqlc

import (
	"context"
	"time"
)

const getManyDaysByDate = `-- name: GetManyDaysByDate :many
SELECT
	date, 
	lunch,
	x_period, 
	rotation_day,
	location, 
	notes,
	ap_info,
	cc_info,
	grade_9,
	grade_10,
	grade_11, 
	grade_12,
	created_ts,
	updated_ts
FROM 
	days 
WHERE
	date = ANY($1::date[])
`

func (q *Queries) GetManyDaysByDate(ctx context.Context, db DBTX, dates []time.Time) ([]Day, error) {
	rows, err := db.Query(ctx, getManyDaysByDate, dates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Day
	for rows.Next() {
		var i Day
		if err := rows.Scan(
			&i.Date,
			&i.Lunch,
			&i.XPeriod,
			&i.RotationDay,
			&i.Location,
			&i.Notes,
			&i.ApInfo,
			&i.CcInfo,
			&i.Grade9,
			&i.Grade10,
			&i.Grade11,
			&i.Grade12,
			&i.CreatedTs,
			&i.UpdatedTs,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertDay = `-- name: UpsertDay :one
INSERT INTO days (
	date, 
	lunch,
	x_period, 
	rotation_day,
	location, 
	notes,
	ap_info,
	cc_info,
	grade_9,
	grade_10,
	grade_11, 
	grade_12
) VALUES (
	$1, 
	$2, 
	$3, 
	$4, 
	$5, 
	$6, 
	$7,
	$8, 
	$9,
	$10,
	$11,
	$12
) 
ON CONFLICT (date) DO UPDATE 
SET 
	lunch = $2,
	x_period = $3,
	rotation_day = $4,
	location = $5,
	notes = $6,
	ap_info = $7,
	cc_info = $8, 
	grade_9 = $9,
	grade_10 = $10,
	grade_11 = $11,
	grade_12 = $12
RETURNING date, lunch, x_period, rotation_day, location, notes, ap_info, cc_info, grade_9, grade_10, grade_11, grade_12, created_ts, updated_ts
`

type UpsertDayParams struct {
	Date        time.Time
	Lunch       string
	XPeriod     string
	RotationDay string
	Location    string
	Notes       string
	ApInfo      string
	CcInfo      string
	Grade9      string
	Grade10     string
	Grade11     string
	Grade12     string
}

func (q *Queries) UpsertDay(ctx context.Context, db DBTX, arg UpsertDayParams) (Day, error) {
	row := db.QueryRow(ctx, upsertDay,
		arg.Date,
		arg.Lunch,
		arg.XPeriod,
		arg.RotationDay,
		arg.Location,
		arg.Notes,
		arg.ApInfo,
		arg.CcInfo,
		arg.Grade9,
		arg.Grade10,
		arg.Grade11,
		arg.Grade12,
	)
	var i Day
	err := row.Scan(
		&i.Date,
		&i.Lunch,
		&i.XPeriod,
		&i.RotationDay,
		&i.Location,
		&i.Notes,
		&i.ApInfo,
		&i.CcInfo,
		&i.Grade9,
		&i.Grade10,
		&i.Grade11,
		&i.Grade12,
		&i.CreatedTs,
		&i.UpdatedTs,
	)
	return i, err
}
